<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title><%= stockID %> 거래하기</title>
    <style>
      #message {
        color: red;
      }
      .success {
        color: green;
      }
    </style>
  </head>
  <body>
    <h1><%= stockID %> 거래하기</h1>

    <!-- 현재 가격 표시 -->
    <p>현재 가격: <%= curPrice %> 원</p>

    <!-- 시장가, 지정가 선택 버튼 -->
    <div>
      <button onclick="selectMarketPrice()">시장가</button>
      <button onclick="selectLimitPrice()">지정가</button>
    </div>

    <!-- 수량 및 가격 입력 -->
    <div id="trade-info">
      <input
        type="number"
        id="quantity"
        placeholder="수량 입력"
        min="1"
        oninput="calculateTotalPrice()"
        disabled
      />
      <input
        type="number"
        id="price"
        placeholder="가격 입력"
        min="1"
        disabled
      />
      <p id="total-price">총 가격: - 원</p>
      <p id="message"></p>
    </div>

    <!-- 매수하기, 매도하기 버튼 -->
    <div>
      <button onclick="buy()">매수하기</button>
      <button onclick="sell()">매도하기</button>
    </div>

    <script>
           let selectedPriceType = ""; // 시장가 또는 지정가
           let selectedOrderType = ""; // 매수 또는 매도
           let curPrice = <%= curPrice %>; // 현재가 (stock table에서 가져옴)
           let balance = 0; // 예수금
           let tradableQty = 0; // 거래 가능 수량

           // 시장가 선택 시 가격 비활성화 및 총 가격 숨김
           function selectMarketPrice() {
               selectedPriceType = "시장가";
               document.getElementById("price").value = "";
               document.getElementById("price").disabled = true;
               document.getElementById("quantity").disabled = false; // 수량 입력 가능
               document.getElementById("total-price").textContent = "총 가격: - 원"; // 총 가격 표시 제거
           }

           // 지정가 선택 시 가격 활성화
           function selectLimitPrice() {
               selectedPriceType = "지정가";
               document.getElementById("price").value = "";
               document.getElementById("price").disabled = false;
               document.getElementById("quantity").disabled = false; // 수량 입력 가능
               calculateTotalPrice();
           }

           // 총 가격 계산
           function calculateTotalPrice() {
               if (selectedPriceType === "시장가") return; // 시장가일 때는 총 가격 표시하지 않음
               const quantity = parseInt(document.getElementById("quantity").value) || 0;
               const price = parseInt(document.getElementById("price").value) || 0;
               const totalPrice = quantity * price;
               document.getElementById("total-price").textContent = `총 가격: ${totalPrice} 원`;
           }

           // 매수하기 버튼 클릭 시
           function buy() {
               if (!selectedPriceType) {
                   showError("먼저 시장가 또는 지정가를 선택하세요.");
                   return;
               }
               selectedOrderType = "매수";
               checkOrderConditions();
           }

           // 매도하기 버튼 클릭 시
           function sell() {
               if (!selectedPriceType) {
                   showError("먼저 시장가 또는 지정가를 선택하세요.");
                   return;
               }
               selectedOrderType = "매도";
               checkOrderConditions();
           }

           // 주문 조건 확인
           function checkOrderConditions() {
               const quantity = parseInt(document.getElementById("quantity").value);
               const price = selectedPriceType === "시장가" ? curPrice : parseInt(document.getElementById("price").value);
               const totalPrice = quantity * price;

               if (isNaN(quantity) || isNaN(price) || quantity <= 0) {
                   showError("유효한 수량과 가격을 입력하세요.");
                   return;
               }

               if (selectedOrderType === "매수") {
                   fetchBalance(balance => {
                       if (totalPrice > balance) {
                           showError("돈이 부족합니다.");
                       } else {
                           processOrder(quantity, price);
                       }
                   });
               } else if (selectedOrderType === "매도") {
                   fetchTradableQty(tradableQty => {
                       if (quantity > tradableQty) {
                           showError("매도 잔량이 부족합니다.");
                       } else {
                           processOrder(quantity, price);
                       }
                   });
               }
           }
      // 예수금 가져오기
       function fetchBalance(callback) {
           fetch("/userInfo/balance")
               .then(response => response.json())
               .then(data => {
                   balance = data.balance;
                   callback(balance);
               })
               .catch(error => {
                   showError("예수금을 가져오는 중 오류가 발생했습니다.");
               });
       }

       // 거래 가능 수량 가져오기
       function fetchTradableQty(callback) {
           fetch(`/portfolio/tradableQty?stockID=<%= stockID %>`)
               .then(response => response.json())
               .then(data => {
                   tradableQty = data.quantity;
                   callback(tradableQty);
               })
               .catch(error => {
                   showError("거래 가능 수량을 가져오는 중 오류가 발생했습니다.");
               });
       }
           // 주문 처리
           function processOrder(quantity, price) {
               const orderPrice = selectedPriceType === "시장가" ? curPrice : price; // 시장가일 경우 현재 가격으로 처리

               fetch("/trade", {
                   method: "POST",
                   headers: { "Content-Type": "application/json" },
                   body: JSON.stringify({
                       userID: "<%= userID %>",
                       stockID: "<%= stockID %>",
                       price: orderPrice, // 시장가일 경우 현재가 사용
                       quantity: quantity,
                       orderType: selectedOrderType,
                       priceType: selectedPriceType
                   })
               })
               .then(response => response.json())
               .then(data => {
                   if (data.success) {
                       if (selectedOrderType === "매도") {
                           updateTradableQty(quantity);
                           showSuccess("매도 예약이 완료되었습니다.");
                       } else if (selectedOrderType === "매수") {
                           updateBalance(orderPrice * quantity, "decrease");
                           showSuccess("매수 예약이 완료되었습니다.");
                       }
                       resetInputs();
                   } else {
                       showError("주문 처리 중 오류가 발생했습니다.");
                   }
               })
               .catch(error => {
                   showError("주문 처리 중 오류가 발생했습니다.");
               });
           }

           // balance 업데이트 함수
           function updateBalance(amount) {
               const balanceChange = -Math.abs(amount);

               fetch("/userInfo/updateBalance", {
                   method: "POST",
                   headers: { "Content-Type": "application/json" },
                   body: JSON.stringify({
                       userID: "<%= userID %>",
                       balanceChange: balanceChange
                   })
               })
               .then(response => response.json())
               .then(data => {
                   if (!data.success) {
                       showError("예수금 업데이트 중 오류가 발생했습니다.");
                   }
               })
               .catch(error => console.error("Error updating balance:", error));
           }

           // tradQty 업데이트 함수
           function updateTradableQty(quantity) {
               const qtyChange = -Math.abs(quantity);

               fetch("/portfolio/updateTradableQty", {
                   method: "POST",
                   headers: { "Content-Type": "application/json" },
                   body: JSON.stringify({
                       userID: "<%= userID %>",
                       stockID: "<%= stockID %>",
                       quantity: qtyChange
                   })
               })
               .then(response => response.json())
               .then(data => {
                   if (!data.success) {
                       showError("거래 가능 수량 업데이트 중 오류가 발생했습니다.");
                   }
               })
               .catch(error => console.error("Error updating tradable quantity:", error));
           }

           // 성공 메시지 표시
           function showSuccess(message) {
               const messageEl = document.getElementById("message");
               messageEl.textContent = message;
               messageEl.className = "success";
           }

           // 오류 메시지 표시
           function showError(message) {
               const messageEl = document.getElementById("message");
               messageEl.textContent = message;
               messageEl.className = "";
           }

           // 입력 필드 초기화
           function resetInputs() {
               document.getElementById("quantity").value = "";
               document.getElementById("price").value = selectedPriceType === "시장가" ? curPrice : "";
               document.getElementById("total-price").textContent = "총 가격: - 원";
           }
    </script>
  </body>
</html>
